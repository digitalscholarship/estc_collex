<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.1 on 2012-08-15 -->

<plugin>
  <name>Maven Resources Plugin</name>
  <description>The Resources Plugin handles the copying of project resources to the output
    directory. There are two different kinds of resources: main resources and test resources. The
    difference is that the main resources are the resources associated to the main
    source code while the test resources are associated to the test source code.
    Thus, this allows the separation of resources for the main source code and its
    unit tests.</description>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-resources-plugin</artifactId>
  <version>2.6</version>
  <goalPrefix>resources</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>copy-resources</goal>
      <description>Copy resources of the configured plugin attribute resources</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugin.resources.CopyResourcesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>2.3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>buildFilters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>false</editable>
          <description>The list of additional filter properties files to be used along with System and project
properties, which would be used for the filtering.
&lt;br/&gt;
See also: {@link ResourcesMojo#filters}.</description>
        </parameter>
        <parameter>
          <name>delimiters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Set of delimiters for expressions to filter within the resources. These delimiters are specified in the
form &apos;beginToken*endToken&apos;. If no &apos;*&apos; is given, the delimiter is assumed to be the same for start and end.
&lt;/p&gt;&lt;p&gt;
So, the default filtering delimiters might be specified as:
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;delimiters&amp;gt;
  &amp;lt;delimiter&amp;gt;${*}&amp;lt;/delimiter&amp;gt;
  &amp;lt;delimiter&amp;gt;@&amp;lt;/delimiter&amp;gt;
&amp;lt;/delimiters&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Since the &apos;@&apos; delimiter is the same on both ends, we don&apos;t need to specify &apos;@*@&apos; (though we can).
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expression preceded with the String won&apos;t be interpolated
\${foo} will be replaced with ${foo}</description>
        </parameter>
        <parameter>
          <name>escapeWindowsPaths</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to escape backslashes and colons in windows-style paths.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties,
project properties, and filter properties files specified in the POM build/filters section,
which should be used for the filtering during the current mojo execution.
&lt;br/&gt;
Normally, these will be configured from a plugin&apos;s execution section, to provide a different
set of filters for a particular execution. For instance, starting in Maven 2.2.0, you have the
option of configuring executions with the id&apos;s &lt;code&gt;default-resources&lt;/code&gt; and
&lt;code&gt;default-testResources&lt;/code&gt; to supply different configurations for the two
different types of resources. By supplying &lt;code&gt;extraFilters&lt;/code&gt; configurations, you
can separate which filters are used for which type of resource.</description>
        </parameter>
        <parameter>
          <name>includeEmptyDirs</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Copy any empty directories included in the Resources.</description>
        </parameter>
        <parameter>
          <name>mavenFilteringHints</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
List of plexus components hint which implements {@link MavenResourcesFiltering#filterResources(MavenResourcesExecution)}.
They will be executed after the resources copying/filtering.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>nonFilteredFileExtensions</name>
          <type>java.util.List</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional file extensions to not apply filtering (already defined are : jpg, jpeg, gif, bmp, png)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory into which to copy the resources.</description>
        </parameter>
        <parameter>
          <name>overwrite</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite existing files even if the destination files are newer.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>The list of resources we want to transfer. See the Maven Model for a
description of how to code the resources element.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>supportMultiLineFiltering</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>stop searching endToken at the end of line</description>
        </parameter>
        <parameter>
          <name>useBuildFilters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>If false, don&apos;t use the filters specified in the build/filters section of the POM when
processing resources in this mojo execution.
&lt;br/&gt;
See also: {@link ResourcesMojo#buildFilters} and {@link ResourcesMojo#filters}</description>
        </parameter>
        <parameter>
          <name>useDefaultDelimiters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <buildFilters implementation="java.util.List" default-value="${project.build.filters}"/>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${maven.resources.escapeString}</escapeString>
        <escapeWindowsPaths implementation="boolean" default-value="true">${maven.resources.escapeWindowsPaths}</escapeWindowsPaths>
        <includeEmptyDirs implementation="boolean" default-value="false">${maven.resources.includeEmptyDirs}</includeEmptyDirs>
        <overwrite implementation="boolean" default-value="false">${maven.resources.overwrite}</overwrite>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <supportMultiLineFiltering implementation="boolean" default-value="false">${maven.resources.supportMultiLineFiltering}</supportMultiLineFiltering>
        <useBuildFilters implementation="boolean" default-value="true"/>
        <useDefaultDelimiters implementation="boolean" default-value="true"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.filtering.MavenResourcesFiltering</role>
          <role-hint>default</role-hint>
          <field-name>mavenResourcesFiltering</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>testResources</goal>
      <description>Copy resources for the test source code to the test output directory.
Always uses the project.build.testResources element to specify the resources to copy.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-test-resources</phase>
      <implementation>org.apache.maven.plugin.resources.TestResourcesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>buildFilters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>false</editable>
          <description>The list of additional filter properties files to be used along with System and project
properties, which would be used for the filtering.
&lt;br/&gt;
See also: {@link ResourcesMojo#filters}.</description>
        </parameter>
        <parameter>
          <name>delimiters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Set of delimiters for expressions to filter within the resources. These delimiters are specified in the
form &apos;beginToken*endToken&apos;. If no &apos;*&apos; is given, the delimiter is assumed to be the same for start and end.
&lt;/p&gt;&lt;p&gt;
So, the default filtering delimiters might be specified as:
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;delimiters&amp;gt;
  &amp;lt;delimiter&amp;gt;${*}&amp;lt;/delimiter&amp;gt;
  &amp;lt;delimiter&amp;gt;@&amp;lt;/delimiter&amp;gt;
&amp;lt;/delimiters&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Since the &apos;@&apos; delimiter is the same on both ends, we don&apos;t need to specify &apos;@*@&apos; (though we can).
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expression preceded with the String won&apos;t be interpolated
\${foo} will be replaced with ${foo}</description>
        </parameter>
        <parameter>
          <name>escapeWindowsPaths</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to escape backslashes and colons in windows-style paths.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties,
project properties, and filter properties files specified in the POM build/filters section,
which should be used for the filtering during the current mojo execution.
&lt;br/&gt;
Normally, these will be configured from a plugin&apos;s execution section, to provide a different
set of filters for a particular execution. For instance, starting in Maven 2.2.0, you have the
option of configuring executions with the id&apos;s &lt;code&gt;default-resources&lt;/code&gt; and
&lt;code&gt;default-testResources&lt;/code&gt; to supply different configurations for the two
different types of resources. By supplying &lt;code&gt;extraFilters&lt;/code&gt; configurations, you
can separate which filters are used for which type of resource.</description>
        </parameter>
        <parameter>
          <name>includeEmptyDirs</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Copy any empty directories included in the Resources.</description>
        </parameter>
        <parameter>
          <name>mavenFilteringHints</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
List of plexus components hint which implements {@link MavenResourcesFiltering#filterResources(MavenResourcesExecution)}.
They will be executed after the resources copying/filtering.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>nonFilteredFileExtensions</name>
          <type>java.util.List</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional file extensions to not apply filtering (already defined are : jpg, jpeg, gif, bmp, png)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory into which to copy the resources.</description>
        </parameter>
        <parameter>
          <name>overwrite</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite existing files even if the destination files are newer.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>The list of resources we want to transfer.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass copying of test resources.
Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>supportMultiLineFiltering</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>stop searching endToken at the end of line</description>
        </parameter>
        <parameter>
          <name>useBuildFilters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>If false, don&apos;t use the filters specified in the build/filters section of the POM when
processing resources in this mojo execution.
&lt;br/&gt;
See also: {@link ResourcesMojo#buildFilters} and {@link ResourcesMojo#filters}</description>
        </parameter>
        <parameter>
          <name>useDefaultDelimiters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <buildFilters implementation="java.util.List" default-value="${project.build.filters}"/>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${maven.resources.escapeString}</escapeString>
        <escapeWindowsPaths implementation="boolean" default-value="true">${maven.resources.escapeWindowsPaths}</escapeWindowsPaths>
        <includeEmptyDirs implementation="boolean" default-value="false">${maven.resources.includeEmptyDirs}</includeEmptyDirs>
        <outputDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <overwrite implementation="boolean" default-value="false">${maven.resources.overwrite}</overwrite>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <resources implementation="java.util.List" default-value="${project.testResources}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skip implementation="boolean">${maven.test.skip}</skip>
        <supportMultiLineFiltering implementation="boolean" default-value="false">${maven.resources.supportMultiLineFiltering}</supportMultiLineFiltering>
        <useBuildFilters implementation="boolean" default-value="true"/>
        <useDefaultDelimiters implementation="boolean" default-value="true"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.filtering.MavenResourcesFiltering</role>
          <role-hint>default</role-hint>
          <field-name>mavenResourcesFiltering</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>resources</goal>
      <description>Copy resources for the main source code to the main output directory.
Always uses the project.build.resources element to specify the resources to copy.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-resources</phase>
      <implementation>org.apache.maven.plugin.resources.ResourcesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>buildFilters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>false</editable>
          <description>The list of additional filter properties files to be used along with System and project
properties, which would be used for the filtering.
&lt;br/&gt;
See also: {@link ResourcesMojo#filters}.</description>
        </parameter>
        <parameter>
          <name>delimiters</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
Set of delimiters for expressions to filter within the resources. These delimiters are specified in the
form &apos;beginToken*endToken&apos;. If no &apos;*&apos; is given, the delimiter is assumed to be the same for start and end.
&lt;/p&gt;&lt;p&gt;
So, the default filtering delimiters might be specified as:
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;delimiters&amp;gt;
  &amp;lt;delimiter&amp;gt;${*}&amp;lt;/delimiter&amp;gt;
  &amp;lt;delimiter&amp;gt;@&amp;lt;/delimiter&amp;gt;
&amp;lt;/delimiters&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Since the &apos;@&apos; delimiter is the same on both ends, we don&apos;t need to specify &apos;@*@&apos; (though we can).
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied when filtering resources.</description>
        </parameter>
        <parameter>
          <name>escapeString</name>
          <type>java.lang.String</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Expression preceded with the String won&apos;t be interpolated
\${foo} will be replaced with ${foo}</description>
        </parameter>
        <parameter>
          <name>escapeWindowsPaths</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to escape backslashes and colons in windows-style paths.</description>
        </parameter>
        <parameter>
          <name>filters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>The list of extra filter properties files to be used along with System properties,
project properties, and filter properties files specified in the POM build/filters section,
which should be used for the filtering during the current mojo execution.
&lt;br/&gt;
Normally, these will be configured from a plugin&apos;s execution section, to provide a different
set of filters for a particular execution. For instance, starting in Maven 2.2.0, you have the
option of configuring executions with the id&apos;s &lt;code&gt;default-resources&lt;/code&gt; and
&lt;code&gt;default-testResources&lt;/code&gt; to supply different configurations for the two
different types of resources. By supplying &lt;code&gt;extraFilters&lt;/code&gt; configurations, you
can separate which filters are used for which type of resource.</description>
        </parameter>
        <parameter>
          <name>includeEmptyDirs</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Copy any empty directories included in the Resources.</description>
        </parameter>
        <parameter>
          <name>mavenFilteringHints</name>
          <type>java.util.List</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
List of plexus components hint which implements {@link MavenResourcesFiltering#filterResources(MavenResourcesExecution)}.
They will be executed after the resources copying/filtering.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>nonFilteredFileExtensions</name>
          <type>java.util.List</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional file extensions to not apply filtering (already defined are : jpg, jpeg, gif, bmp, png)</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory into which to copy the resources.</description>
        </parameter>
        <parameter>
          <name>overwrite</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Overwrite existing files even if the destination files are newer.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>false</editable>
          <description>The list of resources we want to transfer.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>supportMultiLineFiltering</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>stop searching endToken at the end of line</description>
        </parameter>
        <parameter>
          <name>useBuildFilters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>If false, don&apos;t use the filters specified in the build/filters section of the POM when
processing resources in this mojo execution.
&lt;br/&gt;
See also: {@link ResourcesMojo#buildFilters} and {@link ResourcesMojo#filters}</description>
        </parameter>
        <parameter>
          <name>useDefaultDelimiters</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <buildFilters implementation="java.util.List" default-value="${project.build.filters}"/>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</encoding>
        <escapeString implementation="java.lang.String">${maven.resources.escapeString}</escapeString>
        <escapeWindowsPaths implementation="boolean" default-value="true">${maven.resources.escapeWindowsPaths}</escapeWindowsPaths>
        <includeEmptyDirs implementation="boolean" default-value="false">${maven.resources.includeEmptyDirs}</includeEmptyDirs>
        <outputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <overwrite implementation="boolean" default-value="false">${maven.resources.overwrite}</overwrite>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <resources implementation="java.util.List" default-value="${project.resources}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <supportMultiLineFiltering implementation="boolean" default-value="false">${maven.resources.supportMultiLineFiltering}</supportMultiLineFiltering>
        <useBuildFilters implementation="boolean" default-value="true"/>
        <useDefaultDelimiters implementation="boolean" default-value="true"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.filtering.MavenResourcesFiltering</role>
          <role-hint>default</role-hint>
          <field-name>mavenResourcesFiltering</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on maven-resources-plugin.&lt;br/&gt;
Call &lt;code&gt;mvn resources:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.maven.plugin.resources.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-file</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-parameter-documenter</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-http-lightweight</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-http-shared</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>jtidy</groupId>
      <artifactId>jtidy</artifactId>
      <type>jar</type>
      <version>4aug2000r7-dev</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <type>jar</type>
      <version>1.0.b2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-api</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-sink-api</artifactId>
      <type>jar</type>
      <version>1.0-alpha-7</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-error-diagnostics</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-ssh-external</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-ssh-common</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-descriptor</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interactivity-api</artifactId>
      <type>jar</type>
      <version>1.0-alpha-4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-ssh</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jsch</artifactId>
      <type>jar</type>
      <version>0.1.27</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-monitor</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <type>jar</type>
      <version>3.8.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>2.0.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-filtering</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-build-api</artifactId>
      <type>jar</type>
      <version>0.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.13</version>
    </dependency>
  </dependencies>
</plugin>